#!/usr/bin/env node
require("dotenv").config();

const program = require("commander");
const words = require("./lib/words");
const inquirer = require("inquirer");
const chalk = require("chalk");

const guessWord = [
  {
    name : 'username',
    type : 'input',
    message: 'Guess the word:',
    validate: function( value ) {
      if (value.length) {
        return true;
      } else {
        return 'Please Guess the word .';
      }
    }
  }
];

program
  .command("defn <word>")
  .alias("a")
  .description("definition of a word")
  .action(async word => {
    try {
      const definitions = await words.getDefinition(word);
      console.log(chalk.yellow.bold("Meanings"));
      definitions.forEach((o, i) =>
        console.log("\n" + (i + 1) + ". " + o.text)
      );
    } catch (e) {
      console.log(chalk.yellow("Word not found"));
    }
  });

program
  .command("play")
  .alias("b")
  .description("any random word")
  .action(async () => {
    try {
      let word = await words.getRandomWord();
      console.log(word);

      Promise.all([words.getDefinition(word),words.getSimilarWords("all", word),words.getExamples(word)])
          .then((results)=>{
            let definitions = results[0];
            let getExamples = results[2];
            let synonyms = results[1].filter(o => o.relationshipType == "synonym");
            console.log("Guess the word");
            console.log('meaning',definitions[0].text);
            console.log('synonym',synonyms[0].words[0]);
            console.log('examples',getExamples.examples[0].text);

          })
          .catch(e=>{console.log(e)})
    } catch (e) {
      console.log(e);
    }
  });

program
  .command("ex <word>")
  .alias("c")
  .description("examples of a word")
  .action(async word => {
    try {
      const examples = await words.getExamples(word);
      console.log(chalk.yellow.bold("Usage examples"));
      examples.examples.forEach((o, i) =>
        console.log("\n" + (i + 1) + ". " + o.text)
      );
    } catch (e) {
      console.log(chalk.yellow("Word not found"));
    }
  });

program
  .command("syn <word>")
  .alias("d")
  .description("synonyms of a word")
  .action(async word => {
    try {
      const similarWords = await words.getSimilarWords("syn", word);
      console.log(chalk.yellow.bold("synonyms"));

      let synonyms = similarWords.filter(o => o.relationshipType == "synonym");
      synonyms.length && synonyms[0].words.forEach(o => console.log(o));
    } catch (e) {
      console.log(chalk.yellow("Word not found"));
    }
  });

program
  .command("ant <word>")
  .alias("e")
  .description("antyonoms of a word")
  .action(async word => {
    try {
      const similarWords = await similarWords.getSimilarWords("ant", word);
      console.log(chalk.yellow.bold("antonyms"));

      let antonyms = similarWords.filter(o => o.relationshipType == "antonym");
      antonyms.length && antonyms[0].words.forEach(o => console.log(o));
    } catch (e) {
      console.log(chalk.yellow("Word not found"));
    }
  });

  program
    .command("random")
    .alias("m")
    .description("random word")
    .action(async ()=> {
      try {
        let word = await words.getRandomWord();
        console.log(chalk.red.bold("\nWord of the day  "),word);

        Promise.all([words.getDefinition(word),words.getSimilarWords("all", word),words.getExamples(word)])
            .then((results)=>{
              const definitions = results[0];

              console.log(chalk.yellow.bold("\nMeanings"));
              definitions.forEach((o, i) =>
                console.log("\n" + (i + 1) + ". " + o.text)
              );
              console.log(chalk.yellow.bold("\nsynonyms"));

              let synonyms = results[1].filter(o => o.relationshipType == "synonym");
              synonyms.length && synonyms[0].words.forEach(o => console.log(o));
              console.log(chalk.yellow.bold("\nantonyms"));

              let antonyms = results[1].filter(o => o.relationshipType == "antonym");
              antonyms.length && antonyms[0].words.forEach(o => console.log(o));

              let getExamples = results[2];

              console.log(chalk.yellow.bold("\nUsage examples"));
              getExamples.examples.forEach((o, i) =>
                console.log("\n" + (i + 1) + ". " + o.text)
              );
            })
            .catch(e=>{console.log(e)})

      } catch (e) {
        console.log(chalk.yellow("Error while retrieving word"));
      }
    });

    program
      .command("all <word>")
      .alias("l")
      .description("definitions, synonyms of word")
      .action(async word => {
        try {
          console.log(chalk.red.bold("\nWord "),word);


          Promise.all([words.getDefinition(word),words.getSimilarWords("all", word),words.getExamples(word)])
              .then((results)=>{
                const definitions = results[0];

                console.log(chalk.yellow.bold("\nMeanings"));
                definitions.forEach((o, i) =>
                  console.log("\n" + (i + 1) + ". " + o.text)
                );
                console.log(chalk.yellow.bold("\nsynonyms"));

                let synonyms = results[1].filter(o => o.relationshipType == "synonym");
                synonyms.length && synonyms[0].words.forEach(o => console.log(o));
                console.log(chalk.yellow.bold("\nantonyms"));

                let antonyms = results[1].filter(o => o.relationshipType == "antonym");
                antonyms.length && antonyms[0].words.forEach(o => console.log(o));

                let getExamples = results[2];

                console.log(chalk.yellow.bold("\nUsage examples"));
                getExamples.examples.forEach((o, i) =>
                  console.log("\n" + (i + 1) + ". " + o.text)
                );
              })
              .catch(e=>{console.log(e)})

        } catch (e) {
          console.log(chalk.yellow("Error while retrieving word"));
        }
      });



if(process.argv.length == 2){
  process.argv.push("random");
}else if(process.argv.length == 3 &&  process.argv[2]!= "play"){
  process.argv.splice(2,0,"all");
  // console.log(process.argv);

}
program.parse(process.argv);
